{"version":3,"sources":["../src/index.js"],"names":["collection","camel","Camel","pascal","Pascal","hyphen","Hyphen","constant","Constant","snake","Snake","underscore","Underscore","sentence","Sentence","other","Other","transform","target","text","Object","entries","k","v","test","style"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,aAAa;AACjBC,SAAO,IAAIC,eAAJ,EADU;AAEjBC,UAAQ,IAAIC,gBAAJ,EAFS;AAGjBC,UAAQ,IAAIC,gBAAJ,EAHS;AAIjBC,YAAU,IAAIC,kBAAJ,EAJO;AAKjBC,SAAO,IAAIC,eAAJ,EALU;AAMjBC,cAAY,IAAIC,oBAAJ,EANK;AAOjBC,YAAU,IAAIC,kBAAJ,EAPO;AAQjBC,SAAO,IAAIC,eAAJ;AARU,CAAnB;;AAWA,IAAMC,YAAY,SAAZA,SAAY,CAACC,MAAD,EAASC,IAAT,EAAkB;AAAA;AAAA;AAAA;;AAAA;AAClC,yBAAmBC,OAAOC,OAAP,CAAerB,UAAf,CAAnB,8HAA+C;AAAA;AAAA,UAArCsB,CAAqC;AAAA,UAAlCC,CAAkC;;AAC7C,UAAIA,EAAEC,IAAF,CAAOL,IAAP,CAAJ,EAAkB;AAChB,eAAOI,EAAEL,MAAF,EAAUC,IAAV,CAAP;AACD;AACF;AALiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOlC,SAAO,EAAP;AACD,CARD;;AAUO,IAAMM,wBAAQ,SAARA,KAAQ,OAAQ;AAAA;AAAA;AAAA;;AAAA;AAC3B,0BAAmBL,OAAOC,OAAP,CAAerB,UAAf,CAAnB,mIAA+C;AAAA;AAAA,UAArCsB,CAAqC;AAAA,UAAlCC,CAAkC;;AAC7C,UAAIA,EAAEC,IAAF,CAAOL,IAAP,CAAJ,EAAkB;AAChB,eAAOG,CAAP;AACD;AACF;AAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAO3B,SAAO,EAAP;AACD,CARM;;AAUA,IAAMrB,wBAAQ,SAARA,KAAQ;AAAA,SAAQgB,UAAU,OAAV,EAAmBE,IAAnB,CAAR;AAAA,CAAd;;AAEA,IAAMhB,0BAAS,SAATA,MAAS;AAAA,SAAQc,UAAU,QAAV,EAAoBE,IAApB,CAAR;AAAA,CAAf;;AAEA,IAAMd,0BAAS,SAATA,MAAS;AAAA,SAAQY,UAAU,QAAV,EAAoBE,IAApB,CAAR;AAAA,CAAf;;AAEA,IAAMZ,8BAAW,SAAXA,QAAW;AAAA,SAAQU,UAAU,UAAV,EAAsBE,IAAtB,CAAR;AAAA,CAAjB;;AAEA,IAAMV,wBAAQ,SAARA,KAAQ;AAAA,SAAQQ,UAAU,OAAV,EAAmBE,IAAnB,CAAR;AAAA,CAAd;;AAEA,IAAMR,kCAAa,SAAbA,UAAa;AAAA,SAAQM,UAAU,YAAV,EAAwBE,IAAxB,CAAR;AAAA,CAAnB;;AAEA,IAAMN,8BAAW,SAAXA,QAAW;AAAA,SAAQI,UAAU,UAAV,EAAsBE,IAAtB,CAAR;AAAA,CAAjB;;kBAEQ;AACbM,cADa;AAEbxB,cAFa;AAGbE,gBAHa;AAIbE,gBAJa;AAKbE,oBALa;AAMbE,cANa;AAObE,wBAPa;AAQbE;AARa,C","file":"index.js","sourcesContent":["import Camel from './models/basic/Camel';\nimport Pascal from './models/basic/Pascal';\nimport Hyphen from './models/basic/Hyphen';\nimport Constant from './models/basic/Constant';\nimport Snake from './models/basic/Snake';\nimport Sentence from './models/basic/Sentence';\nimport Underscore from './models/Underscore';\nimport Other from './models/Other';\n\nconst collection = {\n  camel: new Camel(),\n  pascal: new Pascal(),\n  hyphen: new Hyphen(),\n  constant: new Constant(),\n  snake: new Snake(),\n  underscore: new Underscore(),\n  sentence: new Sentence(),\n  other: new Other(),\n};\n\nconst transform = (target, text) => {\n  for (let [k, v] of Object.entries(collection)) {\n    if (v.test(text)) {\n      return v[target](text);\n    }\n  }\n\n  return '';\n};\n\nexport const style = text => {\n  for (let [k, v] of Object.entries(collection)) {\n    if (v.test(text)) {\n      return k;\n    }\n  }\n\n  return '';\n};\n\nexport const camel = text => transform('camel', text);\n\nexport const pascal = text => transform('pascal', text);\n\nexport const hyphen = text => transform('hyphen', text);\n\nexport const constant = text => transform('constant', text);\n\nexport const snake = text => transform('snake', text);\n\nexport const underscore = text => transform('underscore', text);\n\nexport const sentence = text => transform('sentence', text);\n\nexport default {\n  style,\n  camel,\n  pascal,\n  hyphen,\n  constant,\n  snake,\n  underscore,\n  sentence,\n};\n"]}